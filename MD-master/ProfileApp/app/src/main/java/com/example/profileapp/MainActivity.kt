package com.example.profileapp

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.platform.LocalConfiguration
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.ui.draw.clip
import com.example.profileapp.ui.theme.ProfileAppTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            ProfileAppTheme {
                ProfileScreen()
            }
        }
    }
}

@Composable
fun ProfileScreen() {
    val configuration = LocalConfiguration.current
    val screenWidth = configuration.screenWidthDp.dp
    val profileSize = screenWidth / 2

    var selectedBlock by remember { mutableStateOf<Block?>(null) }

    // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ñ–æ–Ω–æ–º
    Box(modifier = Modifier.fillMaxSize()) {
        // –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        Image(
            painter = painterResource(id = R.drawable.theme), // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ—Å—É—Ä—Å
            contentDescription = "Background Image",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop // –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        )

        // –ö–æ–Ω—Ç–µ–Ω—Ç
        Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {
            // –ù–æ–≤—ã–π Box –¥–ª—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
            Box(
                modifier = Modifier
                    .align(Alignment.CenterHorizontally)
                    .padding(16.dp)
                    .border(2.dp, MaterialTheme.colorScheme.primary, RoundedCornerShape(16.dp)) // –†–∞–º–∫–∞
                    .padding(16.dp) // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
            ) {
                // –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
                Image(
                    painter = painterResource(id = R.drawable.profile),
                    contentDescription = "Profile Image",
                    modifier = Modifier
                        .size(profileSize) // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                        .clip(RoundedCornerShape(16.dp)) // –û–∫—Ä—É–≥–ª—ã–µ —É–≥–ª—ã
                        .align(Alignment.Center) // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
                )
            }

            // –ù–æ–≤—ã–π Box –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            Box(
                modifier = Modifier
                    .align(Alignment.Start) // –°–º–µ—Å—Ç–∏–º –≤–ª–µ–≤–æ
                    .padding(top = 16.dp) // –û—Ç—Å—Ç—É–ø –æ—Ç —Ñ–æ—Ç–æ
            ) {
                Column(
                    horizontalAlignment = Alignment.Start // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤–ª–µ–≤–æ
                ) {
                    Text("Name: Anastasia Bovkun", fontSize = 24.sp, fontWeight = FontWeight.Bold)
                    Text("Year: 20 years old", fontSize = 16.sp)
                    Text("Role: Product Manager", fontSize = 16.sp)
                }
            }

            // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–º–∞–π–ª–æ–≤
            Button(
                onClick = { selectedBlock = if (selectedBlock == Block.PHOTOS) null else Block.PHOTOS },
                modifier = Modifier.fillMaxWidth().padding(8.dp)
            ) {
                Text("üì∏ Photos")
            }
            Button(
                onClick = { selectedBlock = if (selectedBlock == Block.ACHIEVEMENTS) null else Block.ACHIEVEMENTS },
                modifier = Modifier.fillMaxWidth().padding(8.dp)
            ) {
                Text("üèÜ Achievements")
            }
            Button(
                onClick = { selectedBlock = if (selectedBlock == Block.PROJECTS) null else Block.PROJECTS },
                modifier = Modifier.fillMaxWidth().padding(8.dp)
            ) {
                Text("üìÇ Projects")
            }

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
            when (selectedBlock) {
                Block.PHOTOS -> PhotoBlock()
                Block.ACHIEVEMENTS -> AchievementsBlock()
                Block.PROJECTS -> ProjectsBlock()
                null -> {} // –ù–∏—á–µ–≥–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
            }
        }
    }
}


enum class Block {
    PHOTOS,
    ACHIEVEMENTS,
    PROJECTS
}

@Composable
fun PhotoBlock() {
    val photos = listOf(
        R.drawable.profile,
        R.drawable.profile,
        R.drawable.profile,
        R.drawable.profile,
        R.drawable.profile,
        R.drawable.profile
    ) // –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

    var expandedPhoto by remember { mutableStateOf<Int?>(null) } // –•—Ä–∞–Ω–∏—Ç –∏–Ω–¥–µ–∫—Å —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ

    Column(modifier = Modifier.padding(16.dp)) {
        LazyVerticalGrid(
            columns = GridCells.Fixed(3), // 3 —Å—Ç–æ–ª–±—Ü–∞
            contentPadding = PaddingValues(4.dp)
        ) {
            items(photos) { photo ->
                val index = photos.indexOf(photo)
                Image(
                    painter = painterResource(id = photo),
                    contentDescription = "Photo",
                    modifier = Modifier
                        .padding(4.dp)
                        .size(100.dp) // –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                        .clickable {
                            // –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–æ–µ —Ñ–æ—Ç–æ —É–∂–µ —É–≤–µ–ª–∏—á–µ–Ω–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º, –∏–Ω–∞—á–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                            expandedPhoto = if (expandedPhoto == index) null else index
                        }
                )
            }
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
    expandedPhoto?.let { index ->
        Box(
            modifier = Modifier.fillMaxSize().background(Color.Black.copy(alpha = 0.8f))
        ) {
            Image(
                painter = painterResource(id = photos[index]),
                contentDescription = "Expanded Photo",
                modifier = Modifier
                    .fillMaxSize()
                    .clickable { expandedPhoto = null } // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –∫–ª–∏–∫–µ
                    .padding(32.dp), // –û—Ç—Å—Ç—É–ø—ã
                contentScale = ContentScale.Fit // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
            )
        }
    }
}



@Composable
fun AchievementsBlock() {
    Box(
        modifier = Modifier
            .padding(16.dp)
            .border(2.dp, MaterialTheme.colorScheme.primary, RoundedCornerShape(8.dp)) // –†–∞–º–∫–∞
            .clip(RoundedCornerShape(8.dp)) // –û–∫—Ä—É–≥–ª—ã–µ —É–≥–ª—ã
    ) {
        Image(
            painter = painterResource(id = R.drawable.theme),
            contentDescription = "Achievements Background",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞
        )
        Column(modifier = Modifier.padding(16.dp)) {
            Text("1. Completed a course on product management.", fontSize = 16.sp)
            Text("2. Launched a successful product feature.", fontSize = 16.sp)
        }
    }
}

@Composable
fun ProjectsBlock() {
    Box(
        modifier = Modifier
            .padding(16.dp)
            .border(2.dp, MaterialTheme.colorScheme.primary, RoundedCornerShape(8.dp)) // –†–∞–º–∫–∞
            .clip(RoundedCornerShape(8.dp)) // –û–∫—Ä—É–≥–ª—ã–µ —É–≥–ª—ã
    ) {
        Image(
            painter = painterResource(id = R.drawable.theme),
            contentDescription = "Projects Background",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞
        )
        Column(modifier = Modifier.padding(16.dp)) {
            // –ó–¥–µ—Å—å –≤–∞—à –∫–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
            val projects = listOf(
                Project("Mobile App Development", R.drawable.profile, "Developed a mobile application that enhances user experience.")
            )
            LazyVerticalGrid(
                columns = GridCells.Fixed(2), // 2 —Å—Ç–æ–ª–±—Ü–∞
                contentPadding = PaddingValues(4.dp)
            ) {
                items(projects) { project ->
                    ProjectItem(project)
                }
            }
        }
    }
}


@Composable
fun ProjectItem(project: Project) {
    var expanded by remember { mutableStateOf(false) }

    Column(modifier = Modifier.padding(4.dp)) {
        Image(
            painter = painterResource(id = project.imageRes),
            contentDescription = project.name,
            modifier = Modifier
                .size(150.dp)
                .clickable { expanded = !expanded }
        )
        if (expanded) {
            Text(project.description, modifier = Modifier.padding(top = 4.dp))
        }
    }
}

data class Project(val name: String, val imageRes: Int, val description: String)
